# Reference the WPF assemblies
import clr
clr.AddReferenceByName("PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")
clr.AddReferenceByName("PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")
import System.Windows
from System.Windows import Thickness
from System.Windows import TextWrapping

from System.Windows.Controls import Grid
from System.Windows.Controls import RowDefinition
from System.Windows.Controls import ColumnDefinition
from System.Windows import GridUnitType
from System.Windows import GridLength

from System.Windows.Controls import Menu
from System.Windows.Controls import MenuItem
from System.Windows.Controls import ToolTip
from System.Windows.Controls import Separator

from System.Windows.Controls import Label
from System.Windows.Controls import Button
from System.Windows.Controls import TextBox

#
# Controls
#

class EzControl():
	def init(self):
		self.ctrl.Margin  = Thickness(5)
		self.ctrl.Padding = Thickness(5)
	def SetMargin(self,l,t,r,b):
		self.ctrl.Margin = System.Windows.Thickness(l,t,r,b)
	def ShadowEffect(self):
		from System.Windows.Media.Effects import DropShadowBitmapEffect
		self.ctrl.BitmapEffect = DropShadowBitmapEffect()
	def SetFontSize(self,size):
		self.ctrl.FontSize = size
		
class EzLabel(EzControl):
	def __init__(self,h):
		self.ctrl = Label()
		if h.get('label'): self.ctrl.Content = h['label']
		if h.get('fontsize'): self.SetFontSize(h['fontsize'])
		self.init()
		
class EzButton(EzControl):
	def __init__(self,h):
		self.ctrl = Button()
		if h.get('label'): self.ctrl.Content = h['label']
		if h.get('fontsize'): self.SetFontSize(h['fontsize'])
		if h.get('handler'): self.ctrl.Click += h['handler']
		self.init()

class EzTextBox(EzControl):
	def __init__(self,h):
		self.ctrl = TextBox()
		if h.get('fontsize'): self.SetFontSize(h['fontsize'])
		if h.get('multiline'): 
			self.ctrl.AcceptsReturn = True
			self.ctrl.AcceptsTab = True
			self.ctrl.TextWrapping = TextWrapping.Wrap
		self.init()
	
#
# Containers
#
'''
var grid = new Grid();
grid.RowDefinitions.Add (new RowDefinition { Height = new GridLength(2, GridUnitType.Star) });
grid.RowDefinitions.Add (new RowDefinition { Height = new GridLength(1, GridUnitType.Star) });
grid.RowDefinitions.Add (new RowDefinition { Height = new GridLength(200)});
grid.ColumnDefinitions.Add (new ColumnDefinition{ Width = new GridLength (200) });

* RowDefinitions has Height Attribute 
* ColumnDefinition has Width Attribute
* Width, Height
	#GridUnitType.Auto : Fit to content
	#GridUnitType.Star : Relative according remain space
	#GridUnitType.Absolute
'''

class EzGrid():
	def __init__(self):
		self.ctrl = Grid()
	def AddRow(self,height=1,expand=False,span=1):
		if expand: length = GridLength(height, GridUnitType.Star)
		else:      length = GridLength(height, GridUnitType.Auto)
		self.ctrl.RowDefinitions.Add(RowDefinition(Height = length))
	def AddColumn(self,width=1,expand=False,span=1):
		if expand: length = GridLength(width, GridUnitType.Star)
		else:      length = GridLength(width, GridUnitType.Auto)
		self.ctrl.ColumnDefinitions.Add(ColumnDefinition(Width = length))
	def AddItem(self,item,row,col,rowspan=1,colspan=1):
		Grid.SetRow(item, row);
		Grid.SetColumn(item, col);
		self.ctrl.Children.Add(item)
		if rowspan > 1: item.SetValue(Grid.RowSpanProperty, rowspan);
		if colspan > 1: item.SetValue(Grid.ColumnSpanProperty, colspan);
		
class EzVBox(EzGrid):
	def __init__(self):
		self.ctrl = System.Windows.Controls.Grid()
		self.rows = 0
	def AddItem(self,item,height=1,expand=False):
		if expand: length = GridLength(height, GridUnitType.Star)
		else:      length = GridLength(height, GridUnitType.Auto)
		self.ctrl.RowDefinitions.Add(RowDefinition(Height = length))
		Grid.SetRow(item, self.rows);
		self.ctrl.Children.Add(item)
		self.rows = self.rows + 1
				
class EzHBox(EzGrid):
	def __init__(self):
		self.ctrl = System.Windows.Controls.Grid()
		self.cols = 0
	def AddItem(self,item,width=1,expand=False):
		if expand: length = GridLength(width, GridUnitType.Star)
		else:      length = GridLength(width, GridUnitType.Auto)
		self.ctrl.ColumnDefinitions.Add(ColumnDefinition(Width = length))
		Grid.SetColumn(item, self.cols);
		self.ctrl.Children.Add(item)
		self.cols = self.cols + 1
		
						
class EzBox():
	def __init__(self):
		self.ctrl = System.Windows.Controls.StackPanel()
		self.ctrl.Margin =  System.Windows.Thickness(15)
	def Add(self,item):
		self.ctrl.Children.Add(item)

#
# Dialog
#

def EzAlertDialog(message,title=None):
	from System.Windows import MessageBox
	if title: MessageBox.Show(message,title)
	else: MessageBox.Show(message)

def EzYesNoDialog(message,title,icon=System.Windows.MessageBoxImage.Information):
	return MessageBox.Show(message,title,MessageBoxButton.YesNo,icon)

def EzYesNoCancelDialog(message,title,icon=System.Windows.MessageBoxImage.Information):
	return MessageBox.Show(message,title,MessageBoxButton.YesNoCancel,icon)

	
#
# Window
#


class EzMenu():
    def __init__(self,name,menu_table):
		self.ctrl = MenuItem()
		self.ctrl.Header = name;        
		for m in menu_table:
			if not m.get('name') or m['name'] == '-':
				self.ctrl.Items.Add(Separator())
				continue
			if not m.get('item'): continue # Disabled
			if type(m['item']) == list:
				self.ctrl.Items.Add(EzMenu(m['name'],m['item']).ctrl)
			else:
				item = MenuItem()
				if m.get('name'): item.Header = m['name']
				if m.get('item'): item.Click += m['item']
				if m.get('tooltip'): 
					tooltip =  ToolTip()
					tooltip.Content = m['tooltip']
					item.ToolTip = tooltip
				self.ctrl.Items.Add(item)

def EzMenuBar(menu_table):
	ctrl = Menu()
	ctrl.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
	ctrl.VerticalAlignment = System.Windows.VerticalAlignment.Top;
	for m in menu_table:
		ctrl.Items.Add(EzMenu(m['name'],m['item']).ctrl) 
	return ctrl

def EzLayout(content):
    vbox = EzVBox()
    for v in content:
        hbox = EzHBox()
        expand = False
        for h in v:
            name = h.get('name')
            if not name:
                if h.get('expand'): expand = h['expand']
                continue
            if   name == 'Label': f = EzLabel(h)
            elif name == 'Button': f = EzButton(h)
            elif name == 'TextField': f = EzTextBox(h)
            elif name == 'TextArea': h['multiline'] = True;	f = EzTextBox(h)
            else: continue
            '''
            elif name == 'ImageView': f = EzImageView(h,parent)
            elif name == 'ScrollImageView': f = EzScrollImageView(h,parent)
            elif name == 'ToggleButton': f = EzToggleButton(h)
            elif name == 'CheckBox': f = EzCheckBox(h)
            elif name == 'ChoiceBox': f = EzChoiceBox(h)
            elif name == 'ComboBox': f = EzComboBox(h)
            elif name == 'ListBox': f = EzListView(h)
            elif name == 'TreeView': f = EzTreeView(h)
            elif name == 'ProgressBar': f = EzProgressBar(h)
            elif name == 'TextArea': f = EzTextArea(h)
            elif name == 'Notebook': f = EzTabPane(h)
            elif name == 'HSplit': f = EzHSplitPane(h)
            elif name == 'VSplit': f = EzVSplitPane(h)
            '''            
            print('hadd', h['name'])
            hbox.AddItem(f.ctrl,expand=h.get('expand'))
        vbox.AddItem(hbox.ctrl,expand=expand)
    return vbox.ctrl

class EzWindow(System.Windows.Window):
	def Run(self):
		self.box = EzVBox()
		if self.menu: self.box.AddItem(EzMenuBar(self.menu),expand=False)
		if self.content: self.box.AddItem(EzLayout(self.content),expand=True)
	
		self.Content = self.box.ctrl
		System.Windows.Application().Run(self) 
		

	def SetTitle(self,title):
		self.Title = title
	def SetSize(self,width,height):
		self.Width = width
		self.Height = height

#
# Application
#

class EzApp(EzWindow):
	def __init__(self):
		self.SetTitle('EzIronPython Demo')
		self.SetSize(320, 240)
		self.box = EzBox()
		self.Content = self.box.ctrl
		self.box.Add( EzButton("Push", self.onButtonClick ).ctrl )
			
	def onButtonClick(self, sender, args):
	   message = System.Windows.Controls.Label()
	   message.FontSize = 12
	   message.Content = 'Welcome to IronPython!'
	   self.box.Add (message)

class EzAppGrid(EzWindow):
	def __init__(self):
		self.menu = [
			{ 'name' : "File",
			  'item' : [
					{ 'name' : "Exit" , 'item' : self.onExit, 'icon' : 'exit.png', 'tooltip' : 'Exit Program' },
					{ 'name' : "-" ,  },
					{ 'name' : "About" , 'item' : self.onAbout, 'icon' : 'exit.png' } ]
			}, { 'name' : "Help",
			  'item' : [
					{ 'name' : "About", 'item' : self.onAbout, 'check' : True, 'icon' : 'new.png' } ]
			}]
		self.content = [ # vbox
			[ # hbox
				{ "name" : "Label", "label" : "Address:", "menu" : self.menu },
				{ "name" : "TextField", "key" : "text", "expand" : True, "menu" : self.menu },
				{ "name" : "Button", 'handler' : self.onAbout, "label" : "About", "tooltip" : "About this program" },
			],         
			[ # hbox
				{ "name" : "TextArea", "key" : "text", "expand" : True, "menu" : self.menu },
				{ 'expand' : True }
			],   			       
		]			
		self.SetTitle('EzIronPython Demo')
		self.SetSize(320, 240)

	def onExit(self, sender, args):
		System.Windows.Application.Current.Shutdown();
	def onAbout(self, sender, args):
		EzAlertDialog("Hello, world!", "My App");

if __name__ == "__main__":
	appWin = EzAppGrid()
	appWin.Run()
	
